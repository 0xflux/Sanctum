use std::{thread::sleep, time::Duration};

use clap::Parser;
use windows::Win32::{Foundation::CloseHandle, System::{Memory::{VirtualAllocEx, MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE}, Threading::{OpenProcess, PROCESS_ALL_ACCESS}}};

#[derive(Parser)]
struct Cli {
    #[arg(long)]
    pid: u32,
}

fn main() -> ! {
    sleep(Duration::from_secs(1));
    let args = Cli::parse();
    println!("Attempting to open process: {}", args.pid);
    let res = unsafe {
        OpenProcess(PROCESS_ALL_ACCESS, false, args.pid)
    };

    println!("Open process result: {:?}", res);

    let handle = if res.is_ok() {
        res.unwrap()
    } else {
        panic!("Did not get handle");
    };

    
    let allocated_vaddr = unsafe {
        VirtualAllocEx(handle, 
            None, 
            100, 
            MEM_COMMIT | MEM_RESERVE, 
            PAGE_EXECUTE_READWRITE
        )
    };
    
    if allocated_vaddr.is_null() {
        panic!("[-] Did not allocate memory in target process");
    } else {
        println!("[+] Allocated at address: {:p}", allocated_vaddr);
    }
    
    let _ = unsafe { CloseHandle(handle)};
    
    loop {}
}
