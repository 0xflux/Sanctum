use std::{thread::sleep, time::Duration};

use clap::Parser;
use windows::Win32::{Foundation::CloseHandle, System::Threading::{OpenProcess, PROCESS_ALL_ACCESS}};

#[derive(Parser)]
struct Cli {
    #[arg(long)]
    pid: u32,
}

fn main() -> ! {
    sleep(Duration::from_secs(1));
    let args = Cli::parse();
    println!("Attempting to open process: {}", args.pid);
    let res = unsafe {
        OpenProcess(PROCESS_ALL_ACCESS, false, args.pid)
    };

    println!("Open process result: {:?}", res);

    if res.is_ok(){
        let _ = unsafe { CloseHandle(res.unwrap())};
    }

    loop {}
}
